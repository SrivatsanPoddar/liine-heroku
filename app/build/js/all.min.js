'use strict';

// Declare app level module which depends on filters, and services
var app = angular.module('liineApp',
  [ 'liineApp.controllers.header',
    'liineApp.controllers.live',
    'liineApp.controllers.IVR',
    'liineApp.controllers.competitor',
    'liineApp.controllers.customize',
    'liineApp.config',
    'liineApp.directives.toFocus',
    'ngRoute','ngClipboard','ui.tree']
  );

'use strict';

// Declare app level module which depends on filters, and services
angular.module('liineApp.config', ['ngRoute'])

app.config(['$routeProvider','$locationProvider','ngClipProvider', 
    function($routeProvider,$locationProvider, ngClipProvider) {

      $routeProvider
      .when('/',{templateUrl:'build/html/landing/landing.html'})
      .when('/contact',  { templateUrl: 'build/html/contact/contact.html' })
      .when('/live/:company_id', {templateUrl: 'build/html/live/live.html'})
      .when('/competitors', {templateUrl: 'build/html/competitors/competitors.html'})
      .when('/ivr', {templateUrl: 'build/html/IVR/IVR.html'})
      .when('/customize', {templateUrl: 'build/html/customizeLive/customizeLive.html'})
      .otherwise(       { redirectTo: '/' });

      ngClipProvider.setPath('bower_components/zeroclipboard/dist/ZeroClipboard.swf');
      
      //ngClipProvider.setPath("//cdnjs.cloudflare.com/ajax/libs/zeroclipboard/2.1.6/ZeroClipboard.swf");
    }]);

'use strict';

angular.module('liineApp.controllers.IVR', ['liineApp.services.IVR'])
  .controller('IVRController', ['$scope','IVRservice',
    function($scope, IVRservice) {

      $scope.treeOptions = {
        beforeDrop: function(event) {
          console.log("Before dropped!");
          saveOldTree();
          return true;
        }
      };

    $scope.list = [{
      "display_text": "Comcast",
      "children": [

        {"display_text": "Trouble with Service",
        "children":[
         
          {
          "display_text": "TV",
          "children":[
          {
            "display_text": "Video-on-Demand",
            "phone_number":"1(800)934-6489",
            "children":[]},
            {
            "display_text": "Picture Quality",
            "phone_number":"1(800)934-6489",
            "children":[]},
            {
            "display_text": "Other",
            "phone_number":"1(800)934-6489",
            "children":[]}]},
          {
          "display_text": "Internet",
          "phone_number":"1(800)934-6489",
          "children":[]},
          {
          "display_text": "Phone",
          "phone_number":"1(800)934-6489",
          "children":[]}]},

        {   "display_text": "Billing",
            "phone_number":"1(800)934-6489",
          "children":[]},

        {             "display_text": "Add Services",
            "phone_number":"1(800)934-6489",
        "children":[]}]
    }];

    var company_id = 1;

    $scope.getInstructionTree = function(input_company_id) {
        
        if (input_company_id) {
          company_id = input_company_id;
        }

        IVRservice.get({company_id:$scope.company_id},function(response) {
            console.log("Response from getting instruction tree:");
            console.log(response);

            if (response.instruction_tree.instruction_tree === null) {
              $scope.list = [{"display_text": "(New Node)",
                                children:[]}];
            }
            else {
              $scope.list = response.instruction_tree;
            }

        },function(errorResponse) {
            console.log("Error getting instruction tree:");
            console.log(errorResponse);
        } );
    };

    $scope.saveInstructionTree = function() {
      $scope.itemBeingEdited.editing = false;
      console.log("Trying to save...");
      IVRservice.save([],{instruction_tree: $scope.list, company_id:company_id},function(value, responseHeader) {
          console.log("Response from trying to update instruction tree:");
          console.log(value);
      },function(errorResponse) {
          console.log("Error updating instruction tree:");
          console.log(errorResponse);
      } );
    };

    $scope.itemBeingEdited = {};
    $scope.oldLists = [];


    $scope.undo = function() {
      $scope.list = $scope.oldLists.pop();
    };

    var saveOldTree = function () {
      console.log("Save tree called");
       
       var oldListToAdd = angular.copy($scope.list);
        console.log(oldListToAdd)
       $scope.oldLists.push(oldListToAdd);
    };

    $scope.removeItem = function(scope) {
      console.log("Remove called");
      saveOldTree();
      scope.remove();
    };

    $scope.toggle = function(scope) {
      scope.toggle();
    };

    $scope.newSubItem = function(scope) {
      saveOldTree();
      var nodeData = scope.$modelValue;

      var newItem = {
        display_text: '(New Node)',
        children: [],
        editing: false,
      };

      nodeData.children.push(newItem);
      $scope.editItem(newItem);
      if (scope.collapsed) {
        scope.toggle();
      }
    };

    var getRootNodesScope = function() {
      return angular.element(document.getElementById("tree-root")).scope();
    };

    $scope.collapseAll = function() {
      var scope = getRootNodesScope();
      scope.collapseAll();
    };

    $scope.editItem = function(item) {
      saveOldTree();
      $scope.itemBeingEdited.editing = !$scope.itemBeingEdited.editing;
      item.editing = true;
      $scope.itemBeingEdited = item;
      

    };

    $scope.endEdit = function(item) {
      $scope.itemBeingEdited = {};
      item.editing = false;

    };

    //$scope.collapseAll();

    }]);
'use strict';

angular.module('liineApp.controllers.competitor', ['liineApp.services.competitor'])
  .controller('CompetitorController', ['$scope','competitorService',
    function($scope,competitorService) {



      $scope.getCompetitors = function(company_id) {
        competitorService.get({company_id:company_id},function(response) {
            console.log("Response from getting competitors:");
            console.log(response);

            var competitor_ids = response.specified_competitors.competitors;
            $scope.companies = response.all_companies;

            $scope.other_companies = {};
            $scope.companies.forEach(function(company) {
                $scope.other_companies[company.company_id + ""] = company.company_name;
            });

            $scope.competitors = {};
            competitor_ids.forEach(function(competitor_id) {
              $scope.competitors[competitor_id + ""] = $scope.other_companies[competitor_id + ""];
              delete $scope.other_companies.competitor_id;
            });

        },function(errorResponse) {
            console.log("Error getting competitors:");
            console.log(errorResponse);
        } );
      };

      $scope.saveCompetitors = function(company_id) {
        console.log("Trying to save...");
        var competitors_ids = [];
        for(var competitor_id in $scope.competitors) {
           competitors_ids.push(competitor_id);
        }

        competitorService.save([],{company_id:company_id, competitors: competitors_ids},function(value, responseHeader) {
            console.log("Response from trying to update competitors:");
            console.log(value);
        },function(errorResponse) {
            console.log("Error updating competitors:");
            console.log(errorResponse);
        } );
      };

      $scope.addCompetitor = function(competitor_id) {
        console.log("Competitor Added");
        $scope.competitors[competitor_id + ""] = $scope.other_companies[competitor_id + ""];
        delete $scope.other_companies[competitor_id + ""];
      };

      $scope.removeCompetitor = function(competitor_id) {
        console.log("Competitor Removed");
        $scope.other_companies[competitor_id + ""] = $scope.competitors[competitor_id + ""];
        delete $scope.competitors[competitor_id + ""];
      };

      $scope.isCurrentCompetitor = function(competitor_id) {
        return $scope.competitors.hasOwnProperty(competitor_id);
      };



    }]);

'use strict';

angular.module('liineApp.controllers.customize', ['liineApp.services.customize'])
  .controller('CustomizeController', ['$scope','customizeService',
    function($scope,customizeService) {

      $scope.image_urls = [];

      $scope.getImages = function(company_id) {
        customizeService.get({company_id:company_id},function(response) {
            console.log("Response from getting images:");
            console.log(response);
            $scope.image_urls = [];
            if (response.image_urls !== null) {
              $scope.image_urls = response.image_urls;
            }

        },function(errorResponse) {
            console.log("Error getting competitors:");
            console.log(errorResponse);
        } );
      };

      $scope.saveImages = function(company_id) {
        console.log("Trying to save images...");

        customizeService.save([],{company_id:company_id, image_urls: $scope.image_urls},function(value, responseHeader) {
            console.log("Response from trying to update images:");
            console.log(value);
        },function(errorResponse) {
            console.log("Error updating custom images:");
            console.log(errorResponse);
        } );
      };

      // $scope.addCompetitor = function(competitor_id) {
      //   console.log("Competitor Added");
      //   $scope.competitors[competitor_id + ""] = $scope.other_companies[competitor_id + ""];
      //   delete $scope.other_companies[competitor_id + ""];
      // };

      // $scope.removeCompetitor = function(competitor_id) {
      //   console.log("Competitor Removed");
      //   $scope.other_companies[competitor_id + ""] = $scope.competitors[competitor_id + ""];
      //   delete $scope.competitors[competitor_id + ""];
      // };

      // $scope.isCurrentCompetitor = function(competitor_id) {
      //   return $scope.competitors.hasOwnProperty(competitor_id);
      // };



    }]);

'use strict';

angular.module('liineApp.controllers.header', [])
  .controller('HeaderController', ['$scope','$window',
    function($scope, $window) {

      $scope.navbarEntries = [
        {
          "title": $scope.userName + " Gifts",
          "link": "/gifts"},
        {
          "title": "Get App",
          "link": "/get"
        }
      ];

    }]);
'use strict';

angular.module('liineApp.controllers.live', ['liineApp.services.live','liineApp.services.customize'])
  .controller('LiveController', ['$scope','$window','liveService', '$routeParams','$http', '$document','customizeService',
    function($scope, $window, liveService, $routeParams, $http, $document, customizeService) {
      
      




        // main.js
        //var ZeroClipboard = $window.ZeroClipboard;
        // console.log("ZeroClipboard:");
        // console.log(ZeroClipboard);
        // ZeroClipboard.config( { swfPath: "//cdnjs.cloudflare.com/ajax/libs/zeroclipboard/2.1.6/ZeroClipboard.swf" } );
        // var copy_client = new ZeroClipboard();
        // copy_client.clip($document[0].querySelectorAll("p.info_to_copy"));

        // copy_client.on( 'ready', function(event) {
        //        console.log( 'copy_client is loaded' );

        //        console.log("Bound elements:");
        //        console.log(copy_client.elements());

        //        copy_client.on( 'copy', function(event) {
        //          event.clipboardData.setData('text/plain', event.target.innerHTML);
        //          console.log("COPY HAPPENING");
        //        } );

        //        copy_client.on( 'aftercopy', function(event) {
        //          console.log('Copied text to clipboard: ' + event.data['text/plain']);
        //        } );
        //      } );

        //      copy_client.on( 'error', function(event) {
        //        console.log( 'ZeroClipboard error of type "' + event.name + '": ' + event.message );
        //        ZeroClipboard.destroy();
        //      } );

        // copy_client.on( "ready", function( readyEvent ) {

        //   copy_client.on( "aftercopy", function( event ) {
        //     // `this` === `client`
        //     // `event.target` === the element that was clicked
        //     //event.target.style.display = "none";
        //     alert("Copied text to clipboard: " + event.data["text/plain"] );
        //   } );
        // } );

      //var pendingVoiceConnection = null;  //Holds the twilio connection of the current caller

      var params = $routeParams;
      $scope.company_id = params.company_id;
      $scope.info = {};

      var Twilio = $window.Twilio;
      //var url = "http://localhost:5000/requestCallTokenIncoming";
      var url = 'http://safe-hollows-9286.herokuapp.com/requestCallTokenIncoming';
      $http({method: 'GET', url: url, params: {company_id:$scope.company_id}})
        .success(function(data, status, headers, config) {

          var callToken = data.token;

          Twilio.Device.setup(callToken,{debug: true, closeProtection: true});

          Twilio.Device.ready(function (device) {
            console.log("Device is ready!");
          });

          Twilio.Device.incoming(function(connection) {
            connection.accept();
            //pendingVoiceConnection = connection;

            console.log("Call in progress with connection:!");
            console.log(connection);
          })

          Twilio.Device.disconnect(function(connection) {
            console.log("Awaiting Incoming Call...");
          });

          Twilio.Device.offline(function(device) {
            console.log("Device went offline...");
            $window.alert("Device went offline! Please refresh!");
          });

          Twilio.Device.cancel(function(connection) {
            console.log("Caller has cancelled the call");
          });

          Twilio.Device.presence(function (presenceEvent) {
            console.log("presenceEvent: " + presenceEvent.from + " " + presenceEvent.available);
          });

          Twilio.Device.error(function(error) {
            console.log(error.message + " for "  + error.connection);
          });


      }).error(function(data,status, headers, config) {
        console.log("Error getting Twilio Call Token: " + data);
      });
      
      $scope.disconnect = function () {
        Twilio.Device.disconnectAll();
      };



      $scope.pendingConnectionsSize = function () {
        console.log("Size of pendingConnections:", Object.keys($scope.pendingConnections).length);
        return Object.keys($scope.pendingConnections).length;
      }

      $scope.messages = liveService.getMessages();
      $scope.pendingConnections = liveService.getPendingConnections();
      $scope.isConnected = liveService.isConnected();
      $scope.toAuthenticatePictures = liveService.toAuthenticatePictures();
      liveService.init($scope.company_id);
      $scope.currentAuthPicture = null;
      // $scope.refreshMessages = function () {
      //   $scope.messages = liveService.getMessages();
      // };

      $scope.refreshPendingConnections = function () { 
        $scope.pendingConnections = liveService.getPendingConnections();
      };

      $scope.pair = function(senderIndex) {
        console.log("Clicked to pair with caller with senderIndex: " + senderIndex);
        var messageObject = {pair: senderIndex};
        liveService.send(messageObject);
        toastr.success("Connecting to Caller");
      };

      $scope.$watch(function() {return liveService.isConnected() }, 
        function (newIsConnectedState) {
          console.log("The agent-caller connection has changed!");
          $scope.isConnected = newIsConnectedState;
      });

      $scope.$watch(function() {return liveService.toAuthenticatePictures() }, 
        function (newToAuthenticatePictures) {
          console.log("The authenticate picture state has changed!", newToAuthenticatePictures);
          $scope.toAuthenticatePictures = liveService.toAuthenticatePictures();
          if ($scope.toAuthenticatePictures) {
            $scope.currentAuthPicture = liveService.getCurrentAuthenticationPicture();
            $scope.originalAuthPicture = liveService.getOriginalAuthenticationPicture();
            $('#authenticationModal').modal('show');
          }
      });

      $scope.closeAuthentication = function() {
        $scope.currentAuthPicture = null;
        $scope.originalAuthPicture = null;
        liveService.setAuthenticatePictures(false);
      }
      // $scope.$watch(function() {return liveService.getMessages() }, 
      //   function (newMessages) {
      //     console.log("A New Message has been Received");
      //     $scope.messages = newMessages;
      //     copy_client.clip(document.querySelectorAll(".info_to_copy"));
          // console.log("Bound elements:");
          // console.log(copy_client.elements());
      // });

      $scope.sendMessage = function(message) {
        console.log("Clicked to send Message Called!");
        var messageObject = {message: message};
        liveService.send(messageObject);
      };


      toastr.options.closeButton = true;
      toastr.options.positionClass = 'toast-bottom-right';
      toastr.options.timeOut = 1500;
      toastr.options.fadeOut = 500;
      toastr.options.fadeIn = 500;


      $scope.sendRequest = function(request) {
        console.log("Clicked to send Request of Type: " + request.request_type);
        var requestObject = request;
        liveService.send(requestObject);
        if (request.request_format === 'link') {
          console.log("Link formatss: " + $scope.info.link_url + " " + $scope.info.link_description);
          $scope.info.link_url = '';
          $scope.info.link_description = '';
          angular.element('#sendLink').focus();
        }
        //toastr.success("Requested Info From Caller");
      };

      $scope.requestPayment = function() {
          var requestObject = {request_type: 'payment', message: '2 Year Warranty', amount:5.00};
          $scope.sendRequest(requestObject);
      };

      $scope.requestAuthentication = function() {
          var requestObject = {request_type: 'authentication'};
          $scope.sendRequest(requestObject);
      };

      $scope.copyText = function(textToCopy) {
        copy_client.setData("text/plain",textToCopy);
        console.log("Copied2:" + textToCopy);
      };

      
      $scope.showToast = function(textToToast) {
        toastr.success("Copied '" + textToToast + "' to Clipboard!");
        console.log("Show Toast Clicked with:" + textToToast);
      };


      //Get images for image choosing modal
      $scope.image_urls = [];

      $scope.getImages = function() {
        customizeService.get({company_id:$scope.company_id},function(response) {
            console.log("Response from getting images:");
            console.log(response);
            $scope.image_urls = [];
            if (response.image_urls !== null) {
              $scope.image_urls = response.image_urls;
            }

        },function(errorResponse) {
            console.log("Error getting competitors:");
            console.log(errorResponse);
        } );
      };
      $scope.getImages();

      $scope.sendImageURL = function(url) {
        console.log("Sending image url:", url);
        $scope.info.link_url = url;
        $scope.sendRequest({request_format: 'link', request_type: '', message: $scope.info.link_url});
      };

    }]);


'use strict';
 
angular.module('liineApp.directives.toFocus', [])
    .directive('toFocus', function() {
  return {
    restrict: 'A',
    link: function(scope, elem, attrs) {
    	scope.$watch("itemBeingEdited", function(currentValue, previousValue) {

		      if(attrs.toFocus === "true") {
		      	setTimeout(function() {
		      	    elem.select();
		      	}, 10);
	  			
      		}
    	})	

    }
  };
});

'use strict';
 
angular.module('liineApp.services.IVR', ['ngResource'])
    .factory('IVRservice', ['$resource',
        function($resource) {
            return $resource("/instructiontree");               
        }]);
'use strict';
 
angular.module('liineApp.services.competitor', ['ngResource'])
    .factory('competitorService', ['$resource',
        function($resource) {
            return $resource("/specifiedCompetitors");               
        }]);
'use strict';
 
angular.module('liineApp.services.customize', ['ngResource'])
    .factory('customizeService', ['$resource',
        function($resource) {
            return $resource("/customImages");               
        }]);
'use strict';
//Service to control live web-socket communication
angular.module('liineApp.services.live', [])
    .factory('liveService', ['$rootScope',
        function($rootScope) {
        	var Service = {};
            //var url = "ws://localhost:5000/live";
            var url = "ws://safe-hollows-9286.herokuapp.com/live";
            var ws;
            var messages = [];
            var pendingConnections = {};
            var index = 1;
            var pairsIndex = -1;
            var isConnected = false;
            var currentAuthPicture = null;
            var originalAuthPicture = null;
            var toAuthenticate = false;

            return {
            	init: function(company_id) {
            		ws = new WebSocket(url);
            		ws.onopen = function () {
            			console.log("Connection Opened!");
            			ws.send(JSON.stringify({set_company_id: company_id}));
            			setInterval(function() {
            				ws.send(JSON.stringify({message: "Ping from client"}));
            			},20000)
            		};

            		ws.onclose = function () {
            			console.log("Connection Closed!");
            		};

            		ws.onerror = function(error) {
            			console.log("Error: " + error);
            			clearInterval();
            		};

            		ws.onmessage = function(data) {

            			console.log("Received message: " + JSON.stringify(data));
            			console.log(angular.fromJson(data));
            			var receivedData = angular.fromJson(data.data);

            			//If the client connecting to this company...
            			if (receivedData.hasOwnProperty('set_target_company_id')) {
            				console.log("New Pending Connection with senderIndex " + receivedData.senderIndex + " and callPath: " + receivedData.message);
            				$rootScope.$apply(function () {
            					pendingConnections[receivedData.senderIndex + ""] = {callPath: receivedData.message, senderIndex: receivedData.senderIndex};
            				});

            			};

            			//If a caller's connection closes, remove from pending connections if contained in list
            			if (receivedData.hasOwnProperty('close_connection_with_sender_index')) {
            				console.log("Removing Pending Connection with senderIndex " + receivedData.close_connection_with_sender_index);
            				$rootScope.$apply(function () {
            					delete pendingConnections[receivedData.close_connection_with_sender_index + ""];
            				});

            				//If the disconnected socket was the paired caller, then reset pairsIndex and unset isConnected
            				if (receivedData.hasOwnProperty('pairsIndex')) {
            					if (receivedData.pairsIndex === pairsIndex) {
            						$rootScope.$apply(function () {
            							pairsIndex = -1;
            							isConnected = false;
            						});
            					}
            				}

            			};


            			//If server responded with a pairsIndex after requesting to pair with caller, then store the pairsIndex
            			if(receivedData.hasOwnProperty('pair')) {
            				console.log("Pair request confirmed with pairsIndex: " + receivedData.pairsIndex);
            				$rootScope.$apply(function () {
            					pairsIndex = receivedData.pairsIndex;
            					isConnected = true;
            				});
            			};

            			if(receivedData.hasOwnProperty('target_role')) {
                            if (receivedData.request_type === 'MESSAGE') {
                                $rootScope.$apply(function () {
                                    messages.push({message: receivedData.message});
                                });
                            }
                            else if (receivedData.request_type === 'CURRENT AUTHENTICATION PICTURE') {
                                currentAuthPicture = receivedData.message;

                                if (currentAuthPicture && originalAuthPicture) {
                                    $rootScope.$apply(function () {
                                        toAuthenticate = true;
                                    });
                                }
                            }
                            else if (receivedData.request_type === 'ORIGINAL AUTHENTICATION PICTURE') {
                                originalAuthPicture = receivedData.message;

                                if (currentAuthPicture && originalAuthPicture) {
                                    $rootScope.$apply(function () {
                                        toAuthenticate = true;
                                    });
                                }
                            };



            			}

            			// var receivedMessage = angular.fromJson(data.data).message;
            			// console.log("parsed message: " + receivedMessage);
            			// $rootScope.$apply(function () {
	            		// 	messages.push({id: index, message: receivedMessage});
	            		// 	index = index + 1;
            			// })


            		};
            	},
        		getMessages: function() {
        			return messages;
        		},
        		//Get callers to this company waiting to be attended to
        		getPendingConnections: function () {
        			return pendingConnections;
        		},
                toAuthenticatePictures: function() {
                    return toAuthenticate;
                },
                setAuthenticatePictures: function(myToAuthenticate) {
                    toAuthenticate = myToAuthenticate;
                    currentAuthPicture = null;
                    originalAuthPicture = null;
                },
        		isConnected: function() {
        			return isConnected;
        		},
        		send: function(message) {
        			if (!(pairsIndex === -1)) {
        				message.pairsIndex = pairsIndex;
        				message.target_role = "caller";
        				console.log("Paired message of: " + message.message + ". being sent to pairsIndex:" + pairsIndex);
        			}
        			ws.send(JSON.stringify(message));
        		},
                getCurrentAuthenticationPicture: function() {
                    return currentAuthPicture;
                },
                getOriginalAuthenticationPicture: function() {
                    return originalAuthPicture;
                }
            };

        }]);